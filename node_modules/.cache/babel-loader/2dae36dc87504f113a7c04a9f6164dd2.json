{"ast":null,"code":"import _objectSpread from \"/home/r/Desktop/a/prd_management/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/r/Desktop/a/prd_management/src/context/Context.js\";\nimport React, { Component, createContext } from 'react';\nimport items from '../data';\nconst RoomContext = createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.formatData = data => {\n      const tempItems = items.map(item => {\n        const id = item.sys.id;\n        const images = item.fields.images.map(image => image.fields.file.url);\n\n        const rooms = _objectSpread({}, item.fields, {\n          images,\n          id\n        });\n\n        return rooms;\n      });\n      return tempItems;\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handelChange = e => {\n      const target = e.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let _this$state = this.state,\n          rooms = _this$state.rooms,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets; // all the rooms\n\n      let tempRooms = [...rooms]; // convert string values to number\n\n      capacity = +capacity;\n      price = +price; // filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); // filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); // filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast);\n      } // filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets);\n      } // change state\n\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    const rooms = this.formatData(items);\n    const featuredRooms = rooms.filter(room => room.featured);\n    const maxPrice = Math.max(rooms.reduce((acc, room) => room.price), -1);\n    const maxSize = Math.max(rooms.reduce((acc, room) => room.size), 0);\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  render() {\n    return React.createElement(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handelChange: this.handelChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomContext, RoomConsumer };","map":{"version":3,"sources":["/home/r/Desktop/a/prd_management/src/context/Context.js"],"names":["React","Component","createContext","items","RoomContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","formatData","data","tempItems","map","item","id","sys","images","fields","image","file","url","getRoom","slug","tempRooms","room","find","handelChange","e","target","value","checked","name","setState","filterRooms","filter","size","componentDidMount","featured","Math","max","reduce","acc","render","props","children","RoomConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react';\nimport items from '../data';\nconst RoomContext = createContext();\n\nclass RoomProvider extends Component {\n  state = {\n    rooms: [],\n    sortedRooms: [],\n    featuredRooms: [],\n    loading: true,\n    type: 'all',\n    capacity: 1,\n    price: 0,\n    minPrice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    breakfast: false,\n    pets: false\n  };\n\n  componentDidMount() {\n    const rooms = this.formatData(items);\n    const featuredRooms = rooms.filter(room => room.featured);\n    const maxPrice = Math.max(rooms.reduce((acc, room) => room.price), -1);\n    const maxSize = Math.max(rooms.reduce((acc, room) => room.size), 0);\n\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData = data => {\n    const tempItems = items.map(item => {\n      const id = item.sys.id;\n      const images = item.fields.images.map(image => image.fields.file.url);\n      const rooms = { ...item.fields, images, id };\n      return rooms;\n    });\n    return tempItems;\n  };\n\n  getRoom = slug => {\n    let tempRooms = [...this.state.rooms];\n    const room = tempRooms.find(room => room.slug === slug);\n    return room;\n  };\n\n  handelChange = e => {\n    const target = e.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState(\n      {\n        [name]: value\n      },\n      this.filterRooms\n    );\n  };\n  filterRooms = () => {\n    let {\n      rooms,\n      type,\n      capacity,\n      price,\n      minSize,\n      maxSize,\n      breakfast,\n      pets\n    } = this.state;\n    // all the rooms\n    let tempRooms = [...rooms];\n    // convert string values to number\n    capacity = +capacity;\n    price = +price;\n\n    // filter by type\n    if (type !== 'all') {\n      tempRooms = tempRooms.filter(room => room.type === type);\n    }\n    // filter by capacity\n    if (capacity !== 1) {\n      tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n    }\n    // filter by price\n    tempRooms = tempRooms.filter(room => room.price <= price);\n\n    // filter by size\n    tempRooms = tempRooms.filter(\n      room => room.size >= minSize && room.size <= maxSize\n    );\n\n    // filter by breakfast\n    if (breakfast) {\n      tempRooms = tempRooms.filter(room => room.breakfast);\n    }\n\n    // filter by pets\n    if (pets) {\n      tempRooms = tempRooms.filter(room => room.pets);\n    }\n\n    // change state\n    this.setState({ sortedRooms: tempRooms });\n  };\n\n  render() {\n    return (\n      <RoomContext.Provider\n        value={{\n          ...this.state,\n          getRoom: this.getRoom,\n          handelChange: this.handelChange\n        }}\n      >\n        {this.props.children}\n      </RoomContext.Provider>\n    );\n  }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomContext, RoomConsumer };\n"]},"metadata":{},"sourceType":"module"}